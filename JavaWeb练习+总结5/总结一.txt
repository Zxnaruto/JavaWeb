1.web(Servlet)实现页面数据获取，然后调用service中定义的相应的方法（把数据传过去）。
2.service方法中在调用dao层中具体实现的方法
3.页面中主要用action来与servlet配合来实现功能。

*接口：为了方便扩展和重用，里面的方法名一样但功能可以不同，比如一个接口定义增删改查，一个有关mysql数据库的类实现该接口，另一个有关orcle
数据库的类实现这个接口，在调用的时候就可以用接口根据想要调用的方法，来调用不同的接口实现。
这样就使代码结构更加清晰，同样也利于扩展和重写。

*表示层调用控制层(web)，控制层调用业务层(service)，业务层调用数据访问层(dao),分层的目的是解耦，修改一层的某些方法不会影响到其他层。
1.web层，通过setvlet来实现页面数据的获取，以及方法调用的控制(通过action,不同页面有不同的action,在页面中通过action找到相应的servlet
,即web层中的servlet,在servlet中调用service层方法，service层调用dao层实现具体的操作)。
2.在web层通过service接口对象调用接口实现的方法(通过参数)
3.在service层通过dao接口来实现具体的方法。

重定向和转发有一个重要的不同：当使用转发时，JSP容器将使用一个内部的方法来调用目标页面，新的页面继续处理同一个请求，而浏览器将不会知道这个过程。 与之相反，重定向方式的含义是第一个页面通知浏览器发送一个新的页面请求。因为，当你使用重定向时，浏览器中所显示的URL会变成新页面的URL, 而当使用转发时，该URL会保持不变。重定向的速度比转发慢，因为浏览器还得发出一个新的请求。同时，由于重定向方式产生了一个新的请求，所以经过一次重定向后，request内的对象将无法使用。 
怎么选择是重定向还是转发呢？通常情况下转发更快，而且能保持request内的对象，所以他是第一选择。但是由于在转发之后，浏览器中URL仍然指向开始页面，此时如果重载当前页面，开始页面将会被重新调用。如果你不想看到这样的情况，则选择转发。 

转发和重定向的区别 
不要仅仅为了把变量传到下一个页面而使用session作用域，那会无故增大变量的作用域，转发也许可以帮助你解决这个问题。 
重定向：以前的request中存放的变量全部失效，并进入一个新的request作用域。 
转发：以前的request中存放的变量不会失效，就像把两个页面拼到了一起。